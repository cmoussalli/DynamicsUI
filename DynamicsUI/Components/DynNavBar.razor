
<CascadingValue Value="Divider">

    <nav class="navbar navbar-expand-lg" style="@navStyle">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">@Title</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">

                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    @PrimaryArea

                </ul>
                <form class="d-flex">
                    @SecondaryArea

                </form>
            </div>
        </div>

    </nav>
</CascadingValue>

@code {

    [Parameter]
    public Color? BackgroundColor { get; set; }
    [Parameter]
    public Color? BackgroundColor_Disabled { get; set; }
    [Parameter]
    public Color? BackgroundColor_Hover { get; set; }

    [Parameter]
    public Color? FontColor { get; set; }



    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment? PrimaryArea { get; set; }

    [Parameter]
    public RenderFragment? SecondaryArea { get; set; }

    [Parameter]
    public bool Divider { get; set; }

    [Parameter]
    public string ExtraStyle { get; set; }


    private string navStyle;



    protected override void OnInitialized()
    {
        //BackgroundColor
        if (BackgroundColor is not null)
        {
            navStyle = $"background-color:{Utilities.ColorBuilder.ConvertToString(BackgroundColor.Value)};";
        }
        else
        if (DynSettings.NavBackgroundColor is not null)
        {
            navStyle = $"background-color:{Utilities.ColorBuilder.ConvertToString(DynSettings.NavBackgroundColor.Value)};";
        }

        //BackgroundColor_Hover
        if (BackgroundColor_Hover is not null)
        {
            navStyle = navStyle + $"--navbarHoverColor:{Utilities.ColorBuilder.ConvertToString(BackgroundColor_Hover.Value)};";
        }
        else
        if (DynSettings.NavBackgroundColor_Hover is not null)
        {
            navStyle = navStyle + $"--navbarHoverColor:{Utilities.ColorBuilder.ConvertToString(DynSettings.NavBackgroundColor_Hover.Value)};";
        }

        //BackgroundColor_Disabled
        //     if (BackgroundColor_Disabled is not null)
        //     {
        //         navStyle = $"navbarHoverColor:{Utilities.ColorBuilder.ConvertToString(BackgroundColor_Disabled.Value)}";
        //     }
        //     else
        // if (DynSettings.NavBackgroundColor_Hover is not null)
        //     {
        //         navStyle = $"navbarHoverColor:{Utilities.ColorBuilder.ConvertToString(DynSettings.NavBackgroundColor_Hover.Value)}";
        //     }

        //FontColor
        if (FontColor is not null)
        {
            navStyle = navStyle + $"--navbarFontColor:{Utilities.ColorBuilder.ConvertToString(FontColor.Value)};";
        }
        else
        if (DynSettings.NavBackgroundColor_Hover is not null)
        {
            navStyle = navStyle + $"--navbarFontColor:{Utilities.ColorBuilder.ConvertToString(DynSettings.NavFontColor.Value)};";
        }


        if (!string.IsNullOrEmpty(ExtraStyle)) { navStyle = navStyle + " " + ExtraStyle; }
        StateHasChanged();
    }


}
